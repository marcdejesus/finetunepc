// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  phone         String?
  dateOfBirth   DateTime?
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  services        Service[]
  assignedServices Service[] @relation("AssignedServices")
  cart            Cart?
  addresses       Address[]
  reviews         Review[]
  activityLogs    ActivityLog[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  type         AddressType
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)
  
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Product Catalog
model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean    @default(true)
  
  parent      Category?  @relation("CategoryTree", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryTree")
  products    Product[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  description    String
  shortDescription String?
  price          Decimal   @db.Decimal(10,2)
  comparePrice   Decimal?  @db.Decimal(10,2)
  costPrice      Decimal?  @db.Decimal(10,2)
  stock          Int       @default(0)
  sku            String?   @unique
  barcode        String?
  weight         Decimal?  @db.Decimal(8,2)
  categoryId     String
  brand          String?
  warranty       String?
  specifications Json?
  tags           String[]
  featured       Boolean   @default(false)
  isActive       Boolean   @default(true)
  metaTitle      String?
  metaDescription String?
  
  category       Category     @relation(fields: [categoryId], references: [id])
  images         ProductImage[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
  reviews        Review[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  position  Int     @default(0)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}

// Shopping Cart
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, productId])
}

// Orders
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10,2)
  tax             Decimal     @db.Decimal(10,2)
  shipping        Decimal     @db.Decimal(10,2)
  discount        Decimal     @db.Decimal(10,2) @default(0)
  total           Decimal     @db.Decimal(10,2)
  currency        String      @default("USD")
  
  // Shipping Information
  shippingAddressId String
  shippingMethod    String?
  trackingNumber    String?
  
  // Payment Information
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String?
  stripePaymentId   String?
  
  // Notes
  customerNotes     String?
  adminNotes        String?
  
  user              User        @relation(fields: [userId], references: [id])
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  items             OrderItem[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10,2)
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
}

// Services
model Service {
  id            String        @id @default(cuid())
  type          ServiceType
  status        ServiceStatus @default(PENDING)
  title         String
  description   String
  scheduledDate DateTime
  completedDate DateTime?
  userId        String
  assignedTo    String?
  price         Decimal?      @db.Decimal(10,2)
  estimatedHours Int?
  actualHours   Int?
  priority      Priority      @default(MEDIUM)
  
  // Service Details
  deviceInfo    Json?
  issueDetails  String?
  resolution    String?
  partsUsed     String[]
  
  user          User          @relation(fields: [userId], references: [id])
  assignedUser  User?         @relation("AssignedServices", fields: [assignedTo], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  verified  Boolean  @default(false) // Verified purchase
  helpful   Int      @default(0)
  isVisible Boolean  @default(true)
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([productId, userId])
}

// Activity Logs
model ActivityLog {
  id          String            @id @default(cuid())
  userId      String
  action      ActivityAction
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime          @default(now())
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

// Enums
enum Role {
  USER
  ADMIN
  MANAGER
  TECHNICIAN
}

enum AddressType {
  BILLING
  SHIPPING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ServiceType {
  REPAIR
  UPGRADE
  CONSULTATION
  INSTALLATION
  MAINTENANCE
  DIAGNOSTICS
}

enum ServiceStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ActivityAction {
  LOGIN
  LOGOUT
  REGISTER
  PASSWORD_CHANGE
  EMAIL_CHANGE
  PROFILE_UPDATE
  ORDER_CREATE
  ORDER_UPDATE
  ORDER_CANCEL
  SERVICE_CREATE
  SERVICE_UPDATE
  SERVICE_CANCEL
  REVIEW_CREATE
  REVIEW_UPDATE
  REVIEW_DELETE
  ROLE_CHANGE
  ACCOUNT_DELETE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
